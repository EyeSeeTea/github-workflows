name: "Build size check"

on:
  workflow_call:
    inputs:
      branch_name:
        description: "Branch where to fetch bunlemonrc"
        required: false
        default: "master"
        type: string
      runner:
        description: "Specify runner. Defaults to checking visibility"
        required: false
        default: "ubuntu-latest"
        type: string

jobs:
  build-size-check:
    name: Bundlemon Build Size Check
    runs-on: ${{ inputs.runner }}

    steps:
      # Check out base (target) branch at the commit where the PR branched off
      - name: Check out base branch
        uses: actions/checkout@v4

      - name: Install apt libraries
        run: sudo apt install gettext -y

      # Check if .bundlemonrc exists in the caller repo
      - name: Check for .bundlemonrc in caller repo
        id: check_bundlemonrc
        run: |
          if [ -f ".bundlemonrc" ]; then
            echo "‚úÖ Using .bundlemonrc from caller repo"
            echo "USE_CALLER_CONFIG=true" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è No .bundlemonrc in caller repo, will try fetching from workflow repo"
            echo "USE_CALLER_CONFIG=false" >> $GITHUB_ENV
          fi

      # Fetch .bundlemonrc from the workflow repo branch if needed
      - name: Fetch .bundlemonrc from reusable workflow repo
        if: env.USE_CALLER_CONFIG == 'false'
        run: |
          echo "Downloading .bundlemonrc from EyeSeeTea/github-workflows (branch: ${{ inputs.branch_name }})"
          BUNDLEMON_URL="https://raw.githubusercontent.com/EyeSeeTea/github-workflows/${{ inputs.branch_name }}/.bundlemonrc"
          if curl --silent --fail --output .bundlemonrc "$BUNDLEMON_URL"; then
            echo "‚úÖ Successfully downloaded .bundlemonrc"
          else
            echo "‚ùå Failed to fetch .bundlemonrc from the reusable workflow repo. Skipping build size check."
            exit 1
          fi

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'  # Use the Node.js version specified in .nvmrc
          cache: 'yarn'

      # Install and build
      - name: Install and build
        run: |
          yarn install --frozen-lockfile --silent
          yarn build

      #install bundlemon
      - name: Install dependencies (including BundleMon)
        run: |
          if ! npx --no-install bundlemon --version; then
            echo "‚ö†Ô∏è BundleMon not found, installing..."
            yarn add bundlemon --no-lockfile --silent
          else
            echo "‚úÖ BundleMon is already installed"
          fi


      - name: Run BundleMon
        id: bundlemon
        run: |
          BUNDLEMON_REMOTE=false npx bundlemon > bundlemon_raw_output.txt || true
          cat bundlemon_raw_output.txt
          

      - name: Format BundleMon Output
        run: |
          export PATH=$PATH:/usr/bin:/bin
          echo "## üì¶ BundleMon Report" > bundlemon_comment.txt
          
          # Parse JSON report manually and convert bytes to MB
          if [ -f bundlemon-results.json ]; then
          # Extract relevant values from JSON
          group_status=$(grep -o '"status": *"[^"]*"' bundlemon-results.json | head -1 | sed -E 's/"status": *"([^"]*)"/\1/')
          path=$(grep -o '"path": *"[^"]*"' bundlemon-results.json | head -1 | sed -E 's/"path": *"([^"]*)"/\1/')
          size_bytes=$(grep -o '"size": *[0-9]*' bundlemon-results.json | head -1 | sed -E 's/"size": *([0-9]*)/\1/')
          limit_bytes=$(grep -o '"maxSize": *[0-9]*' bundlemon-results.json | head -1 | sed -E 's/"maxSize": *([0-9]*)/\1/')
          percent_increase=$(grep -o '"maxPercentIncrease": *[0-9]*' bundlemon-results.json | head -1 | sed -E 's/"maxPercentIncrease": *([0-9]*)/\1/')
          
          # Convert bytes to MB (rounded to two decimal places)
            size_mb=$(awk "BEGIN {printf \"%.2f\", $size_bytes / 1048576}")
            limit_mb=$(awk "BEGIN {printf \"%.2f\", $limit_bytes / 1048576}")
          
          # Set status icon
          if [ "$group_status" == "Pass" ]; then
          status_icon="‚úÖ"
          summary_message="**No change in files bundle size**"
          elif [ "$group_status" == "Warn" ]; then
          status_icon="‚ö†Ô∏è"
          summary_message="**Bundle size is approaching the limit**"
          else
          status_icon="‚ùå"
          summary_message="**Max size exceeded in group \`$path\`: ${size_mb}MB > ${limit_mb}MB**"
          fi
        
          # Print summary message at the top
          echo "" >> bundlemon_comment.txt
          echo "$summary_message" >> bundlemon_comment.txt
          echo "" >> bundlemon_comment.txt
        
          # Print table headers
          echo "| Status | Path | Size | Limit / Increase |" >> bundlemon_comment.txt
          echo "|:------:|------|:----:|:----------------:|" >> bundlemon_comment.txt
          echo "$status_icon | $path | ${size_mb}MB | ${limit_mb}MB / +${percent_increase}%" >> bundlemon_comment.txt
          fi
          
          # Add collapsible section for raw CLI output
          echo "" >> bundlemon_comment.txt
          echo "<details>" >> bundlemon_comment.txt
          echo "<summary>üîç Raw CLI Output</summary>" >> bundlemon_comment.txt
          echo "" >> bundlemon_comment.txt
          echo '```' >> bundlemon_comment.txt
          cat bundlemon_raw_output.txt >> bundlemon_comment.txt
          echo '```' >> bundlemon_comment.txt
          echo "</details>" >> bundlemon_comment.txt
          
          # Add collapsible section for raw JSON output
          if [ -f bundlemon-results.json ]; then
          echo "" >> bundlemon_comment.txt
          echo "<details>" >> bundlemon_comment.txt
          echo "<summary>üìù Raw JSON Output</summary>" >> bundlemon_comment.txt
          echo "" >> bundlemon_comment.txt
          echo '```json' >> bundlemon_comment.txt
          cat bundlemon-results.json >> bundlemon_comment.txt
          echo '```' >> bundlemon_comment.txt
          echo "</details>" >> bundlemon_comment.txt
          fi

        # Post comment on PR if workflow is triggered by a PR
      - name: Post PR Comment
        if: github.event_name == 'pull_request'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "$(cat bundlemon_comment.txt)"
        env:
          GH_TOKEN: ${{ github.token }}